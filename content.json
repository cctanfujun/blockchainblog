{"pages":[{"title":"404 Not Found：该页无法显示","date":"2018-09-12T03:25:45.118Z","updated":"2018-09-12T03:25:45.118Z","comments":false,"path":"/404.html","permalink":"http://tanfujun.com//404.html","excerpt":"","text":""},{"title":"关于","date":"2018-09-12T03:25:45.089Z","updated":"2018-09-12T03:25:45.089Z","comments":false,"path":"about/index.html","permalink":"http://tanfujun.com/about/index.html","excerpt":"","text":"区块链工程师，会做 Android ，会做前端，能写 Python 能切图。热爱coding。12345678910111213&#123; name: 'xiaochendev' age: 25, gender: '男', profession: 'BlockChain Developer', experience: '4年', address: '广东省深圳市', education: '本科', github: 'https://github.com/cctanfujun', blog: ['http://cctanfujun.com'] email: 'cctanfujun@163.com', description: '学习各种区块链技术ing',&#125;"},{"title":"分类","date":"2018-09-12T03:25:45.087Z","updated":"2018-09-12T03:25:45.087Z","comments":false,"path":"categories/index.html","permalink":"http://tanfujun.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-09-12T03:25:45.087Z","updated":"2018-09-12T03:25:45.087Z","comments":true,"path":"links/index.html","permalink":"http://tanfujun.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-09-12T03:25:45.078Z","updated":"2018-09-12T03:25:45.078Z","comments":false,"path":"repository/index.html","permalink":"http://tanfujun.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-09-12T03:25:45.088Z","updated":"2018-09-12T03:25:45.088Z","comments":false,"path":"tags/index.html","permalink":"http://tanfujun.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"晓晨EOS开发教程1 -- 搭建开发环境(Docker)","slug":"晓晨EOS开发教程1-搭建开发环境-Docker","date":"2018-09-17T07:53:24.000Z","updated":"2018-09-17T09:34:24.552Z","comments":true,"path":"2018/09/17/xiaochen-eos-development-tutorial-1-building-a-environment-docker/","link":"","permalink":"http://tanfujun.com/2018/09/17/xiaochen-eos-development-tutorial-1-building-a-environment-docker/","excerpt":"","text":"介绍接下来计划做一个 EOS 应用开发的教程,区块链上的应用开发和我们正常的App开发在开发模式上略有区别,传统的开发模式一般是前端人员开发App，服务端人员开发服务端暴露接口，前端和和服务端进行交互，而区块链应用的开发，一般是前端人员开发app,通过区块链sdk(web3.js、eosjs等)调用智能合约开发者开发的智能合约和区块链交互。如图:搭建环境eos 为了避免环境不一致以及各种依赖问题，提供了使用 docker 镜像方便我们使用。首先需要安装 docker 各个系统的童鞋请自行下载安装。eos docker 镜像地址: https://hub.docker.com/r/eosio/eos-dev/tags/eosio 的库下有几个镜像:eos 主网使用，不包含开发依赖eos-dev 包含开发环境，供开发使用builder 完整的编译环境ci \b暂不清楚我们要下载开发环境 eos-dev 执行:123docker pull eosio/eos-dev:v1.2.5docker tag eosio/eos-dev:v1.2.5 eosio/eos-dev:latest下载完成镜像,我们接下来准备使用 docker-compose 来启动节点,说一下什么是 docker-compose ,假设我们要启动一个 web 服务,我们可能要启动多个service,甚至4个 service 的启动顺序和参数也要控制，如果我们都使用 docker run 就太不方便了，所以把多个服务的参数和关系描述到一个文件中，之后只要执行这个文件即可。docker-compose 在 mac 系统下是随着 docker 一起安装的，如果使用其他系统可能需要额外安装，请自行查询。我们新建一个 eos 文件夹作为项目文件夹，新建 eos-local-compose.yml 文件,内容如下：eos-local-compose.yml123456789101112131415161718192021222324252627282930version: &quot;3&quot;services: nodeosd: image: eosio/eos-dev:latest command: /opt/eosio/bin/nodeosd.sh --data-dir /opt/eosio/bin/data-dir -e --delete-all-blocks --http-validate-host=false #--genesis-json /opt/eosio/bin/data-dir/genesis.json #--contracts-console #-e — Enable block production, even if the chain is stale hostname: nodeosd ports: - 8888:8888 - 9876:9876 expose: - &quot;8888&quot; volumes: - local-nodeos-data-volume:/opt/eosio/bin/data-dir #- ./config-local-v1.2.3.ini:/opt/eosio/bin/data-dir/config.ini keosd: image: eosio/eos-dev:latest command: /opt/eosio/bin/keosd --wallet-dir /opt/eosio/bin/data-dir --http-server-address=127.0.0.1:8900 --http-validate-host=false hostname: keosd links: - nodeosd volumes: - local-keosd-data-volume:/opt/eosio/bin/data-dirvolumes: local-nodeos-data-volume: external: true local-keosd-data-volume: external: true然后创建2个volume供2个服务nodeos、keosd挂载使用：1234docker volume create --name=local-nodeos-data-volumedocker volume create --name=local-keosd-data-volume接下来启动节点：1docker-compose -f eos-local-compose.yml up -d-f 指定文件名up 启动容器-d 放到后台可以看到命令行提示创建服务成功。执行查看nodeos的log,如果正在出块，表示测试节点启动成功:1docker logs -f eos_nodeosd_1配置别名方便使用因为我们执行的命令在 docker 的容器中,如果我们要执行一些 eos 的命令就需要进入 docker 中,我们设置一个别名方便我们调用。执行:1alias cleos=&apos;docker-compose -f eos-local-compose.yml exec keosd /opt/eosio/bin/cleos -u http://nodeosd:8888 --wallet-url http://localhost:8900&apos;注意：调用cleos时候需要在 eos-local-compose.yml 文件夹下。执行 cleos get info会打印出当前信息，如图：常用命令查看正在运行的容器1docker ps停止某个正在运行的容器1docker stop name","categories":[],"tags":[{"name":"EOS","slug":"EOS","permalink":"http://tanfujun.com/tags/EOS/"}]},{"title":"zeppelinos 初探","slug":"zeppelinos-初探","date":"2018-09-11T06:56:41.000Z","updated":"2018-09-12T03:25:45.499Z","comments":true,"path":"2018/09/11/preliminary-study-of-zeppelinos/","link":"","permalink":"http://tanfujun.com/2018/09/11/preliminary-study-of-zeppelinos/","excerpt":"","text":"之前在开发以太坊合约的时候一直会使用openzepplin的库,今天看见推出了ZeeplinOS这个项目,研究了一下。https://zeppelinos.org/ZeppelinOS 是专为智能合约设计的操作系统，它不仅提供链上可升级的程序编码库，而且还提供保持程序持续升级、修补的奖励机制。个人理解本质上是对 Truffle 进行了整合,然后把很多代码库做成了库的模式方便开发者使用，在过程中还引入了激励机制让开发者一起维护。如果是有 Truffle 使用经验的人的话应该是比较容易上手的。创建项目首先安装 zos：1npm install --global zos然后初始化项目：123mkdir my-app &amp;&amp; cd my-appnpm initzos init my-app这里会生成 zos.json 这个文件中会记录应用的信息。安装 zos-lib zos库:1npm install zos-lib进行合约编写 MyContract.sol 放在 contracts/ 目录下面:1234567891011pragma solidity ^0.4.21;import \"zos-lib/contracts/migrations/Migratable.sol\";contract MyContract is Migratable &#123; uint256 public x; function initialize(uint256 _x) isInitializer(\"MyContract\", \"0\") public &#123; x = _x; &#125;&#125;这里的合约规则和 solidity 原生的规则略有差别，使用 intialize 作为构造函数，zos 的要求。进行合约编译:1zos add MyContract接下来启动区块链网络，这样我没有按照官网来启动 ganache-cli 而是打开 Ganache 然后修改 truffle-config.js 中的端口号执行12zos push --network local推送你的应用到区块链网络。我理解push命令是推送一个应用到区块链网络，zeppelin应该是认为应用由多个合约组成，合约是可以升级的。创建合约的实例1zos create MyContract --init initialize --args 42 --network local升级合约如果你发现合约有问题要升级合约,比如官方例子给合约增加了一个函数:12345678910111213import \"zos-lib/contracts/migrations/Migratable.sol\";contract MyContract is Migratable &#123; uint256 public x; function initialize(uint256 _x) isInitializer(\"MyContract\", \"0\") public &#123; x = _x; &#125; function increment() public &#123; x += 1; &#125;&#125;把新的代码推送到网络：1zos push --network local执行更新命令：1zos update MyContract --network local使用标准库官方提供了标准库方便开发者使用1zos link openzeppelin-zos使用这些库可以简化智能合约的开发。原理推测我还没有详细研究 zeepelin 辅助实现合约升级的原理，初步猜想应该是通过代理模式，首先部署一个合约,然后通过这个合约来调用其他合约的方法，变更的时候就是调用地址的转向。估计实际的实现应该考虑了更多场景，更多的方案。关于合约升级，推荐大家阅读2篇文章。智能合约升级模式介绍 — 入门篇深度剖析智能合约升级——inherited storageZeppelin 的具体实现之后再研究。个人觉得能快速帮助开发者实现合约编写是很好的,如果能有 Truffle box 那种直接生成前端框架的命令就更好了,现在这种情况，,对于编写应用的开发者还做不到开箱即用。","categories":[{"name":"ETH","slug":"ETH","permalink":"http://tanfujun.com/categories/ETH/"}],"tags":[{"name":"ETH","slug":"ETH","permalink":"http://tanfujun.com/tags/ETH/"},{"name":"zeppelin","slug":"zeppelin","permalink":"http://tanfujun.com/tags/zeppelin/"}]}]}